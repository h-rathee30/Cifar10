#import the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow
import keras
from keras.datasets import cifar10

X = cifar10.load_data()
(x_train, y_train),(x_test, y_test) = X

w_grid = 15
l_grid = 15

fig, axes = plt.subplots(w_grid, l_grid, figsize = (25, 25))
axes = axes.ravel() #ravel is used to flaten the matrix
n_training = len(x_train)

for i in range(0, (l_grid * w_grid)):
    index = np.random.randint(0,n_training)   # pick a random number from 0 to 50000
    axes[i].imshow(x_train[index])
    axes[i].set_title(y_train[index])
    axes[i].axis('off')
    
plt.subplots_adjust(hspace = 0.4)


x_train = x_train.reshape(x_train.shape[0], 32,32,3)
x_test = x_test.reshape(x_test.shape[0], 32,32,3)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

number_cat = 10

y_train = keras.utils.to_categorical(y_train, number_cat)
y_test = keras.utils.to_categorical(y_test, number_cat)

x_train = x_train/225
x_test = x_test/225

Input_size = x_train.shape[1:]

#model

from keras.models import Sequential
from keras.layers import Conv2D, MaxPool2D, AveragePooling2D, Dense, Flatten, Dropout
from keras.optimizers import Adam
from keras.callbacks import TensorBoard
from keras.layers.normalization import BatchNormalization

cnn_model = Sequential()
cnn_model.add(Conv2D(filters = 32, kernel_size = (3,3), activation = 'relu', input_shape = Input_size))
cnn_model.add(BatchNormalization())
cnn_model.add(Conv2D(filters = 32, kernel_size = (3,3), activation = 'relu'))
cnn_model.add(MaxPool2D(2,2))
cnn_model.add(BatchNormalization())
cnn_model.add(Conv2D(filters= 64, kernel_size = (3,3), activation = 'relu'))
cnn_model.add(MaxPool2D(2,2))
cnn_model.add(Conv2D(filters = 64, kernel_size = (3,3), activation = 'relu'))
cnn_model.add(BatchNormalization())
cnn_model.add(Flatten())
cnn_model.add(BatchNormalization())

cnn_model.add(Dense(1024, activation = 'relu'))
cnn_model.add(BatchNormalization())
cnn_model.add(Dense(512, activation = 'relu'))
cnn_model.add(Dropout(0.2))
cnn_model.add(Dense( 10, activation = 'softmax'))
cnn_model.summary()

cnn_model.compile(loss= 'categorical_crossentropy', optimizer= 'adam', metrics=['accuracy'])

history = cnn_model.fit(x_train, y_train, batch_size= 32, epochs= 100, shuffle= True, validation_data=(x_test, y_test))

score = cnn_model.evaluate(x_test, y_test, batch_size= 20, verbose= 1 )
print('Test Accuracy: ', score[1])
